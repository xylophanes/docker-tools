#!/bin/bash
#
#------------------------------------------------------
# Setup boot and halt script for docker (OS) container
# (C) M.A. O'Neill, Tumbling Dice, 2018-2019
#------------------------------------------------------


#----------------
# Display banner
#----------------

echo ""
echo "    bootsetup version 2.00"
echo "    (C) M.A. O'Neill, Tumbling Dice, 2019"
echo ""


#----------------------
# Is docker installed?
#----------------------

docker_installed=$(which dockerd | grep "no")
if [ "$docker_installed" != "" ] ; then
        echo
        echo "bootsetup ERROR: docker is not installed on this host"
        echo

        exit 255 
fi


#---------------------
# Is dockerd running?
#---------------------

dockerd_running=$(docker info |& head -1 |& awk '{print $1}' |& grep "Cannot")
if [ "$dockerd_running" != "" ] ; then
        echo
        echo "bootsetup ERROR: dockerd is not running on this host"
        echo

        exit 255 
fi


#--------------------------
# Get container parameters
# Need PUPS/P3 ask utility
#--------------------------

echo ""
docker images
echo ""


#------------
# Repository
#------------

docker_repository=$(ask "docker repository name")
if [ "$docker_repository" = "" ] ; then
	docker_repository="centos-ssh-dev"
	echo "WARNING: using docker repository: '$docker_repository'"
	echo ""
elif [ "$docker_repository" = "q" ] || [ "$docker_repository" = "quit" ] ; then
	exit 1
fi


#---------------------------------
# Image (in specified repository)
#---------------------------------

docker_image=$(ask "docker image name")
if [ "$docker_image" = "" ] ; then
	echo "ERROR: expecting docker image name"
	echo ""

	exit 255 
elif [ "$docker_image" = "q" ]  || [ "$docker_image"  = "quit" ] ; then
	exit 1
fi


#-------------------------------
# Name of (generated) container
#-------------------------------

docker_container=$(ask "docker container name")
if [ "$docker_container" = "" ] ; then
	echo "ERROR: expecting docker container name"
	echo ""

	exit 255 
elif [ "$docker_container" = "q" ] || [ $docker_container = "quit" ] ; then
	exit 1
fi


#-----------------
# VNC port/screen
#-----------------

ssh_port=$(ask "docker ssh port (default 2023)")
if [ "$ssh_port" = "" ] ; then
	ssh_port=2023
	echo "WARNING: using ssh port: '$ssh_port'"
	echo ""
elif [ "$ssh_port" = "q" ]  || [ "$ssh_port" = "quit" ] ; then
	exit 1
fi

vnc_screen=$(ask "docker vnc screen (default :1, no - no VNC service)")
if [ "$vnc_screen" = "" ] ; then
	vnc_port="" 

	echo "WARNING: vnc service will not start when container is started"
	echo ""

elif [ "$vnc_screen" = "q" ]  || [ "$vnc_screen" = "quit" ] ; then
        exit 1
elif [ "$vnc_screen" = ":1" ] ; then
	vnc_port=5901
elif [ "$vnc_screen" = ":2" ] ; then
	vnc_port=5902
elif [ "$vnc_screen" = ":3" ] ; then
	vnc_port=5903
elif [ "$vnc_screen" = ":4" ] ; then
	vnc_port=5904
elif [ "$vnc_screen" = ":5" ] ; then
	vnc_port=5905
elif [ "$vnc_screen" = ":6" ] ; then
	vnc_port=5906
elif [ "$vnc_screen" = ":7" ] ; then
	vnc_port=5907
elif [ "$vnc_screen" = ":8" ] ; then
	vnc_port=5908
elif [ "$vnc_screen" = ":9" ] ; then
	vnc_port=5909
elif [ "$vnc_screen" = ":10" ] ; then
	vnc_port=5910
else
	echo ""
	echo "ERROR: incorrect vnc screen specification [ports/screens 5901-5910/:1-:10]"
	echo ""

	exit 255 
fi


#-----------------------------------------
# Reset password for container VNC server
#-----------------------------------------

if [ "$vnc_screen" != "" ] ; then
	reset_vnc_passwd=$(ask "reset docker vnc password for screen $vnc_screen (default no)")
	if [ "$reset_vnc_passwd" = "" ] ; then
		reset_vnc_passwd=FALSE

		echo "WARNING: vnc password will not be reset when container is started"
		echo ""

	elif [ "$reset_vnc_passwd" = "q" ] || [ "$reset_vnc_passwd" = "quit" ] ; then
		exit 1
	elif [ "$reset_vnc_passwd" = "y" ] || [ "$reset_vnc_passwd" = "yes" ] ; then
		reset_vnc_passwd=TRUE
	elif [ "$reset_vnc_passwd" = "n" ] || [ "$reset_vnc_passwd" = "no" ] ; then
		reset_vnc_passwd=FALSE
	fi	
else
	reset_vnc_passwd=FALSE
fi


hostLocal=$(ask "host local directory (yes or no, default no)")
if [ "$hostLocal" = "" ] ; then
	hostLocal="no"

	echo "WARNING: no host local directory set for container"
	echo ""

elif [ "$hostLocal" = "q" ]  || [ "$hostLocal" = "quit" ] ; then
	exit 1
fi

hostHome=$(ask "host home directory (yes or no, default no)")
if [ "$hostHome" = "" ] ; then
        hostHome=""

	echo "WARNING: no host home directory set for container"
	echo ""

elif [ "$hostHome" = "q" ] || [ "$hostHome" = "quit" ] ; then
	exit 1
fi



#---------------------------
# These files are hardwired
#---------------------------

if [ "$hostLocal" = "y" ]  || [ "$hostLocal" = "yes" ] ; then
	hostLocal="/usr/local:/hostLocal"
elif [ "$hostlocal" = "" ] || [ "$hostLocal" = "n" ] || [ "$hostLocal" = "no" ] ; then
	hostLocal=""
fi

if [ "$hostHome" = "y" ] || [ "$hostHome" = "yes" ] ; then
	hostHome="/home/export:/hostHome"
elif [ "$hostname" = "" ] || [ "$hostHome" = "n" ] || [ "$hostHome" = "no" ] ; then 
	hostHome=""
fi


#------------------------------------
# Generate boot script for container
#------------------------------------

cat dockerboot.in		   	     | \
sed "s|REPOSITORY|$docker_repository|g"      | \
sed "s|IMAGE|$docker_image|g"                | \
sed "s|CONTAINER|$docker_container|g"        | \
sed "s|SSH_PORT|$ssh_port|g"                 | \
sed "s|VNC_PORT|$vnc_port|g"                 | \
sed "s|RESET_VNC_PASSWD|$reset_vnc_passwd|g" | \
sed "s|VNC_SCREEN|$vnc_screen|g"             | \
sed "s|HOSTLOCAL|$hostLocal|g"               | \
sed "s|HOSTHOME|$hostHome|g"                 1> $docker_container.dockerboot

chmod +x $docker_container.dockerboot 2> /dev/null


#------------------------------------
# Generate halt script for container
#------------------------------------

cat dockerhalt.in			| \
sed "s|CONTAINER|$docker_container|g"   | \
sed "s|VNC_SCREEN|$vnc_screen|g"        1> $docker_container.dockerhalt 

chmod +x $docker_container.dockerhalt 2> /dev/null


#-------------
# We are done
#-------------

echo ""
echo "Boot script for container '$docker_container' ($docker_container.dockerboot) built"
echo "Halt script for container '$docker_container' ($docker_container.dockerhalt) built"
echo ""
echo "Finished"
echo ""

exit 0
